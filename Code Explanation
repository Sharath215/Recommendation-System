{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a532a5c1-ce52-4c23-8fc0-dcb6b6502c72",
   "metadata": {},
   "source": [
    "# code Snippet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c63afdc6-b64b-4244-8726-9d6b6006dd3c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(ratings, similarity, type='user'):\n",
    "    if type == 'user':\n",
    "        mean_user_rating = ratings.mean(axis=1)\n",
    "        #We use np.new axis so that mean_user_rating has same format as ratings\n",
    "        ratings_diff = (ratings - mean_user_rating[:, np.newaxis])\n",
    "        pred = mean_user_rating[:, np.newaxis] + similarity.dot(ratings_diff) / np.array([np.abs(similarity).sum(axis=1)]).T\n",
    "    elif type == 'item':\n",
    "        pred = ratings.dot(similarity) / np.array([np.abs(similarity).sum(axis=1)])\n",
    "    return pred"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b8f4e4d-4a7e-42ba-a607-aea4668bd3d9",
   "metadata": {},
   "source": [
    "# Code Explanation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d0f961b-d820-4c97-b68e-92352dff6500",
   "metadata": {},
   "source": [
    "-->\"def predict(ratings, similarity, type='user')\"\n",
    "\n",
    "This is the function that will do a recommendation system based on either user-based or item-based\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32d79daf-49a5-41f0-ae1c-f6169ce57058",
   "metadata": {},
   "source": [
    "-->\"mean_user_rating = ratings.mean(axis=1)\"\n",
    "\n",
    "This code snippet will calculate the mean rating given by each user.\n",
    "\n",
    "axis = 1 means it will give values in one vertical column"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1f16f4f-134c-49a7-8f16-0c2e2657240c",
   "metadata": {},
   "source": [
    "-->\"ratings_diff = (ratings - mean_user_rating[:, np.newaxis])\r\n",
    "this snippet of code gives the rating difference\n",
    "\n",
    "the Newaxis will convert 1D array to a 2D array. mean rating is subtracted withe the origibnal ratings given by the users\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd986f7c-2909-404e-bc1d-89d128c0aebb",
   "metadata": {},
   "source": [
    "-->\"pred = mean_user_rating[:, np.newaxis] + similarity.dot(ratings_diff) / np.array([np.abs(similarity).sum(axis=1)]).T\"\n",
    "\n",
    "\"similarity.dot(ratings_diff)\" is gives the \".\" product b/w similarity and ratings_diff matrix. a 3x3 matrix is multiplied with another 3x3 matrix\n",
    "\n",
    "T is Transpose of matrix\n",
    "\n",
    "\"np.array([np.abs(similarity).sum(axis=1)])\" \n",
    "\n",
    "np. array converts the result into a 1D array, abs will neglect any negative value present. \".sum \" will add the similarity table column-wise.\n",
    "\n",
    "the function gives predicted ratings for each user, considering their average ratings and their similarities.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "921d5bbb-b236-4d46-a62d-35e7fff16049",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
